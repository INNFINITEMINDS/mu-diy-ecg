/******************************************************************************
                                trace_ecg.pde
                               PROCESSING CODE
*******************************************************************************

Author: Dr. Samuel Bechara
        samuel.bechara@marquette.edu
        Marquette University
        Biomedical Engineering Outreach

Created: 10 November 2015
Last modified: 17 November 2016

Description -------------------------------------------------------------------
This processing code is meant to be used for the Marquette University DIY ECG
outreach project. The program reads the electrocardiogram data generated by the
heart rate monitor and sent to the serial port.

This code relies heavily on libraries written by Sparkfun and Adafruit
employees so please support them and buy their stuff.

If you have any questions about the intended use of this code, please visit
http://www.marquette.edu/biomedical-engineering/outreach.php

Copyright (c) 2016 Samuel Bechara
******************************************************************************/

import processing.serial.*;

Serial myPort;        // The serial port
int xPos = 1;         // horizontal position of the graph
int i = 0;            // R wave counter

float height_old = 0;
float height_new = 0;
float inByte = 0;
float T = 0;          //t and T are time place holders
float t = 0;

//initialize heart rate calculation variables
float heart_rate = 0;
float derivative = 0;
float[] heart_rate_array = new float[3]; //3 cell array to store heart_rate values for average.
float heart_rate_avg = 0;
float r_interval = 0;

String heart_rate_disp = str(0);

PFont font;


void setup () {
  // set the window size
  size(1000, 400);

  //set the font for the heart rate indicator
  font = createFont ("Serif", 32);
  textFont (font);

  // List all the available serial ports
  println(Serial.list());

  // Open whatever port is the one you're using
  //********** YOU MAY NEED TO CHANGE THE SERIAL PORT NUMBER!!!! ************//
  myPort = new Serial(this, Serial.list()[0], 9600);

  // don't generate a serialEvent() unless you get a newline character
  myPort.bufferUntil('\n');

  // set inital background to white
  background(255, 255, 255);
}


void draw () {
  // everything happens in the serialEvent()
}


void serialEvent (Serial myPort) {
  // get the ASCII string:
  String inString = myPort.readStringUntil('\n');

  if (inString != null) {
    // trim off any whitespace:
    inString = trim(inString);

    // If leads off detection is true, notify with blue line
    if (inString.equals("!")) {
      stroke(0, 0, 0xff); //Set stroke to blue ( R, G, B)...He's dead Jim.
      inByte = 512;  // middle of the ADC range (Flat Line)
    }

    // If the data is good let it through
    else {
      stroke(0xff, 0, 0); //Set stroke to red ( R, G, B)
      inByte = float(inString);
     }

     //Map and draw the line for new data point
     inByte = map(inByte, 0, 1023, 0, height);
     height_new = height - inByte;
     line(xPos - 1, height_old, xPos, height_new);
     t=millis();

     //Calculate the derivative (slope) between the previous two points
     derivative = abs(height_new - height_old);

     //If derivative is greater than value indicated begin check if it is an R wave
     //This is the beginning of 3 nested if statements

     if (derivative>20) {
       r_interval = t-T;
       //println(r_interval + "r_interval");

        //assume time interval between R waves cooresponds to a heart rate greater than 20bpm, or else it is just noise
        if (r_interval > 300) {
          heart_rate=((1/(r_interval/1000))*60); //Calculates the heart rate from the R time period
          T=t;
          //println(heart_rate + "heart rate");

          if (i<2) {
            heart_rate_array[i] = heart_rate;
            text("R", xPos, height_new-50); //draw an X where program things R wave occurs. This is so you can visualize if program is identifying R wave correctly
            i=i+1;
          }

          //if it is an R wave, and there have been 3 R waves, calculate the average and display it
          else {
            text("R", xPos, height_new-50); //draw an X where program things R wave occurs. This is so you can visualize if program is identifying R wave correctly
            heart_rate_array[i] = heart_rate;
            heart_rate_avg = ((heart_rate_array[0]+heart_rate_array[1]+heart_rate_array[2])/3);
            heart_rate_disp = str(round(heart_rate_avg)); //convert heart_rate into a string so we can show it
            println(heart_rate_array); //Displays the heart rate array in the message area
            i=0;
          }
        }
       }

     height_old = height_new;

      // at the edge of the screen, go back to the beginning
      if (xPos >= width) {
        //remove saveFrame comment below and change to your name if you would like to save the frame.
        //** WARNING: program will not stop taking frames **//
        //saveFrame("bechara_heart-####.png");
        xPos = 0;
        background(0xff);
      }

     //update heart rate on display
     else if (xPos==1) {
      fill(255,0,0);
      textAlign(CENTER);
      text("Heart Rate (bpm): "+ heart_rate_disp,width/2,60); //Note: this will only display the last calculated heart rate
      xPos++;
     }

      else {
        // increment the horizontal position
        xPos++;
      }

  }
}
